import { PluginType, PluginMap, Plugin, RollupPlugin, WebpackPlugin } from './types.js';
export { Plugin, PluginMap, PluginType, RollupPlugin, RollupPluginList, WebpackPlugin } from './types.js';
import { UnpluginInstance } from 'unplugin';
import { Plugin as Plugin$1 } from 'vite';
export { Plugin as VitePlugin } from 'vite';
import { Plugin as Plugin$2 } from 'esbuild';
export { Plugin as EsbuildPlugin } from 'esbuild';
import 'webpack';
import 'rollup';

declare function resolvePlugin<T extends PluginType>(plugin: OptionsPlugin, type: T): Array<PluginMap[T]>;
declare function resolvePlugins<T extends PluginType>(plugins: OptionsPlugin[], type: T): Array<PluginMap[T]>;
declare const createCombinePlugin: <UserOptions>(factory: Factory<UserOptions>) => UnpluginCombineInstance<UserOptions>;
declare type Factory<UserOptions> = (userOptions: UserOptions) => CombineOptions;
declare type FactoryOutput<UserOptions, Return> = [never] extends UserOptions ? () => Return : undefined extends UserOptions ? (options?: UserOptions) => Return : (options: UserOptions) => Return;
declare type Unplugin<UserOptions> = [
    instance: UnpluginInstance<UserOptions, any> | UnpluginCombineInstance<any>,
    options: UserOptions
];
declare type OptionsPlugin = Plugin | Unplugin<any> | UnpluginCombineInstance<any>;
interface CombineOptions {
    name: string;
    /** vite only */
    enforce?: 'post' | 'pre' | undefined;
    plugins: OptionsPlugin[];
}
interface UnpluginCombineInstance<UserOptions> {
    rollup: FactoryOutput<UserOptions, RollupPlugin>;
    webpack: FactoryOutput<UserOptions, WebpackPlugin>;
    vite: FactoryOutput<UserOptions, Plugin$1[]>;
    esbuild: FactoryOutput<UserOptions, Plugin$2>;
    raw: Factory<UserOptions>;
    plugins: FactoryOutput<UserOptions, OptionsPlugin[]>;
}

export { CombineOptions, Factory, FactoryOutput, OptionsPlugin, Unplugin, UnpluginCombineInstance, createCombinePlugin, resolvePlugin, resolvePlugins };
