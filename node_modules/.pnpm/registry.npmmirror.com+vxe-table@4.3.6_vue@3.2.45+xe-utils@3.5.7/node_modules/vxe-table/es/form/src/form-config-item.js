var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { defineComponent, h, inject, provide, createCommentVNode } from 'vue';
import XEUtils from 'xe-utils';
import GlobalConfig from '../../v-x-e-table/src/conf';
import { VXETable } from '../../v-x-e-table';
import { getFuncText, isEnableConf } from '../../tools/utils';
import { getSlotVNs } from '../../tools/vn';
import { renderTitle } from './render';
import { isActivetem } from './util';
var VxeFormConfigItem = defineComponent({
    name: 'VxeFormConfigItem',
    props: {
        itemConfig2: Object,
        itemConfig: Object
    },
    setup: function (props) {
        var $xeform = inject('$xeform', {});
        var xeformiteminfo = { itemConfig: props.itemConfig };
        provide('$xeformiteminfo', xeformiteminfo);
        provide('$xeformgather', null);
        var renderVN = function () {
            var reactData = $xeform.reactData;
            var _a = $xeform.props, data = _a.data, rules = _a.rules, allSpan = _a.span, allAlign = _a.align, allTitleAlign = _a.titleAlign, allTitleWidth = _a.titleWidth, allTitleColon = _a.titleColon, allTitleAsterisk = _a.titleAsterisk, allTitleOverflow = _a.titleOverflow;
            var computeValidOpts = $xeform.getComputeMaps().computeValidOpts;
            var item = props.itemConfig;
            var collapseAll = reactData.collapseAll;
            var validOpts = computeValidOpts.value;
            var slots = item.slots, title = item.title, visible = item.visible, folding = item.folding, field = item.field, collapseNode = item.collapseNode, itemRender = item.itemRender, showError = item.showError, errRule = item.errRule, className = item.className, titleOverflow = item.titleOverflow, children = item.children;
            var compConf = isEnableConf(itemRender) ? VXETable.renderer.get(itemRender.name) : null;
            var itemClassName = compConf ? compConf.itemClassName : '';
            var defaultSlot = slots ? slots.default : null;
            var titleSlot = slots ? slots.title : null;
            var span = item.span || allSpan;
            var align = item.align || allAlign;
            var titleAlign = XEUtils.eqNull(item.titleAlign) ? allTitleAlign : item.titleAlign;
            var titleWidth = XEUtils.eqNull(item.titleWidth) ? allTitleWidth : item.titleWidth;
            var titleColon = XEUtils.eqNull(item.titleColon) ? allTitleColon : item.titleColon;
            var titleAsterisk = XEUtils.eqNull(item.titleAsterisk) ? allTitleAsterisk : item.titleAsterisk;
            var itemOverflow = (XEUtils.isUndefined(titleOverflow) || XEUtils.isNull(titleOverflow)) ? allTitleOverflow : titleOverflow;
            var showEllipsis = itemOverflow === 'ellipsis';
            var showTitle = itemOverflow === 'title';
            var showTooltip = itemOverflow === true || itemOverflow === 'tooltip';
            var hasEllipsis = showTitle || showTooltip || showEllipsis;
            var params = { data: data, field: field, property: field, item: item, $form: $xeform };
            if (visible === false) {
                return createCommentVNode();
            }
            var isRequired = false;
            if (rules) {
                var itemRules = rules[field];
                if (itemRules) {
                    isRequired = itemRules.some(function (rule) { return rule.required; });
                }
            }
            // 如果为项集合
            var isGather = children && children.length > 0;
            if (isGather) {
                var childVNs = children.map(function (childItem, index) {
                    return h(VxeFormConfigItem, {
                        key: index,
                        itemConfig: childItem
                    });
                });
                return childVNs.length ? h('div', {
                    class: ['vxe-form--gather vxe-row', item.id, span ? "vxe-col--".concat(span, " is--span") : '', className ? (XEUtils.isFunction(className) ? className(params) : className) : '']
                }, childVNs) : createCommentVNode();
            }
            var contentVNs = [];
            if (defaultSlot) {
                contentVNs = $xeform.callSlot(defaultSlot, params);
            }
            else if (compConf && compConf.renderItemContent) {
                contentVNs = getSlotVNs(compConf.renderItemContent(itemRender, params));
            }
            else if (field) {
                contentVNs = [XEUtils.toValueString(XEUtils.get(data, field))];
            }
            if (collapseNode) {
                contentVNs.push(h('div', {
                    class: 'vxe-form--item-trigger-node',
                    onClick: $xeform.toggleCollapseEvent
                }, [
                    h('span', {
                        class: 'vxe-form--item-trigger-text'
                    }, collapseAll ? GlobalConfig.i18n('vxe.form.unfolding') : GlobalConfig.i18n('vxe.form.folding')),
                    h('i', {
                        class: ['vxe-form--item-trigger-icon', collapseAll ? GlobalConfig.icon.FORM_FOLDING : GlobalConfig.icon.FORM_UNFOLDING]
                    })
                ]));
            }
            if (errRule && validOpts.showMessage) {
                contentVNs.push(h('div', {
                    class: 'vxe-form--item-valid',
                    style: errRule.maxWidth ? {
                        width: "".concat(errRule.maxWidth, "px")
                    } : null
                }, errRule.content));
            }
            var ons = showTooltip ? {
                onMouseenter: function (evnt) {
                    $xeform.triggerTitleTipEvent(evnt, params);
                },
                onMouseleave: $xeform.handleTitleTipLeaveEvent
            } : {};
            return h('div', {
                class: [
                    'vxe-form--item',
                    item.id,
                    span ? "vxe-col--".concat(span, " is--span") : '',
                    className ? (XEUtils.isFunction(className) ? className(params) : className) : '',
                    itemClassName ? (XEUtils.isFunction(itemClassName) ? itemClassName(params) : itemClassName) : '',
                    {
                        'is--title': title,
                        'is--colon': titleColon,
                        'is--asterisk': titleAsterisk,
                        'is--required': isRequired,
                        'is--hidden': folding && collapseAll,
                        'is--active': isActivetem($xeform, item),
                        'is--error': showError
                    }
                ],
                itemConfig: item,
                key: item.id
            }, [
                h('div', {
                    class: 'vxe-form--item-inner'
                }, [
                    title || titleSlot ? h('div', __assign({ class: ['vxe-form--item-title', titleAlign ? "align--".concat(titleAlign) : null, {
                                'is--ellipsis': hasEllipsis
                            }], style: titleWidth ? {
                            width: isNaN(titleWidth) ? titleWidth : "".concat(titleWidth, "px")
                        } : null, title: showTitle ? getFuncText(title) : null }, ons), renderTitle($xeform, item)) : null,
                    h('div', {
                        class: ['vxe-form--item-content', align ? "align--".concat(align) : null]
                    }, contentVNs)
                ])
            ]);
        };
        var $xeformconfigitem = {
            renderVN: renderVN
        };
        return $xeformconfigitem;
    },
    render: function () {
        return this.renderVN();
    }
});
export default VxeFormConfigItem;
