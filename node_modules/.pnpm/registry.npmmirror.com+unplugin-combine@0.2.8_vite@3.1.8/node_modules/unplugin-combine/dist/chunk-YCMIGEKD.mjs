import {
  getPluginList
} from "./chunk-BTPLYCKZ.mjs";

// src/index.ts
import { toArray } from "@antfu/utils";

// src/vite.ts
var getVitePlugin = (factory) => {
  return (userOptions) => {
    const { plugins } = factory(userOptions);
    return resolvePlugins(plugins, "vite");
  };
};

// src/esbuild.ts
var getEsbuildPlugin = (factory) => {
  return (userOptions) => {
    const { name, plugins } = factory(userOptions);
    return {
      name,
      setup(build) {
        for (const plugin of resolvePlugins(plugins, "esbuild")) {
          plugin.setup(build);
        }
      }
    };
  };
};

// src/webpack.ts
var getWebpackPlugin = (factory) => {
  return (userOptions) => {
    const { plugins } = factory(userOptions);
    return (compiler) => {
      for (const plugin of resolvePlugins(plugins, "webpack")) {
        if (typeof plugin === "object") {
          plugin.apply.bind(compiler, compiler);
        } else {
          plugin.call(compiler, compiler);
        }
      }
    };
  };
};

// src/index.ts
function resolvePlugin(plugin, type) {
  const result = Array.isArray(plugin) ? toArray(plugin[0][type](plugin[1])) : [plugin];
  return result.flatMap((plugin2) => {
    if ("combinedPlugins" in plugin2) {
      return plugin2.combinedPlugins;
    }
    return plugin2;
  });
}
function resolvePlugins(plugins, type) {
  return plugins.flatMap((plugin) => resolvePlugin(plugin, type));
}
var createCombinePlugin = (factory) => {
  return {
    get rollup() {
      return getRollupPlugin(factory);
    },
    get vite() {
      return getVitePlugin(factory);
    },
    get esbuild() {
      return getEsbuildPlugin(factory);
    },
    get webpack() {
      return getWebpackPlugin(factory);
    },
    get raw() {
      return factory;
    },
    get plugins() {
      return getPluginList(factory);
    }
  };
};

// src/rollup.ts
function addPlugin(name, pluginList, plugins) {
  const index = pluginList.findIndex((plugin) => plugin && plugin.name === name);
  pluginList.splice(index + 1, 0, ...plugins);
}
var getRollupPlugin = (factory, vite = false) => {
  return (userOptions) => {
    const { name, enforce, plugins } = factory(userOptions);
    const resolvedPlugins = resolvePlugins(plugins, "rollup");
    const plugin = {
      name,
      options(options) {
        options.plugins || (options.plugins = []);
        addPlugin(name, options.plugins, resolvedPlugins);
      },
      combinedPlugins: resolvedPlugins
    };
    if (vite) {
      ;
      plugin.enforce = enforce;
    }
    return plugin;
  };
};

export {
  addPlugin,
  getRollupPlugin,
  getVitePlugin,
  getWebpackPlugin,
  resolvePlugin,
  resolvePlugins,
  createCombinePlugin,
  getEsbuildPlugin
};
