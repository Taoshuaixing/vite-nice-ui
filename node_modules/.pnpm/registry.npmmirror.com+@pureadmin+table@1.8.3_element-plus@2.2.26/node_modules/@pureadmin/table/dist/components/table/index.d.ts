import "./index.css";
import { type CSSProperties } from "vue";
declare const _default: import("vue").DefineComponent<{
    data: {
        type: import("vue").PropType<any[]>;
        default: () => never[];
    };
    size: StringConstructor;
    width: (StringConstructor | NumberConstructor)[];
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    fit: {
        type: BooleanConstructor;
        default: boolean;
    };
    stripe: BooleanConstructor;
    border: BooleanConstructor;
    rowKey: import("vue").PropType<string | ((row: any) => string)>;
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSummary: BooleanConstructor;
    sumText: StringConstructor;
    summaryMethod: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").SummaryMethod<any>>;
    rowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
    rowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
    cellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
    cellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
    headerRowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
    headerRowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
    headerCellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
    headerCellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
    highlightCurrentRow: BooleanConstructor;
    currentRowKey: (StringConstructor | NumberConstructor)[];
    emptyText: StringConstructor;
    expandRowKeys: import("vue").PropType<any[]>;
    defaultExpandAll: BooleanConstructor;
    defaultSort: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").Sort>;
    tooltipEffect: StringConstructor;
    spanMethod: import("vue").PropType<(data: {
        row: any;
        rowIndex: number;
        column: import("element-plus/es/components/table/src/table-column/defaults").TableColumnCtx<any>;
        columnIndex: number;
    }) => number[] | {
        rowspan: number;
        colspan: number;
    }>;
    selectOnIndeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indent: {
        type: NumberConstructor;
        default: number;
    };
    treeProps: {
        type: import("vue").PropType<{
            hasChildren?: string;
            children?: string;
        }>;
        default: () => {
            hasChildren: string;
            children: string;
        };
    };
    lazy: BooleanConstructor;
    load: import("vue").PropType<(row: any, treeNode: import("element-plus/es/components/table/src/table/defaults").TreeNode, resolve: (data: any[]) => void) => void>;
    style: {
        type: import("vue").PropType<CSSProperties>;
        default: () => {};
    };
    className: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: string;
    };
    scrollbarAlwaysOn: {
        type: BooleanConstructor;
        default: boolean;
    };
    flexible: BooleanConstructor;
    key: {
        type: StringConstructor | NumberConstructor;
        default: string;
    };
    columns: {
        type: ArrayConstructor;
        default: any[];
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingConfig: {
        type: ObjectConstructor;
        default: () => void;
    };
    alignWhole: {
        type: StringConstructor;
        default: string;
    };
    headerAlign: {
        type: StringConstructor;
        default: string;
    };
    showOverflowTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowHoverBgColor: {
        type: StringConstructor;
        default: string;
    };
    pagination: {
        type: ObjectConstructor;
        default: {
            total: number;
            pageSize: number;
            align: string;
            background: boolean;
            pageSizes: number[];
            layout: string;
        };
    };
    paginationSmall: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("size-change" | "current-change")[], "size-change" | "current-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    data: {
        type: import("vue").PropType<any[]>;
        default: () => never[];
    };
    size: StringConstructor;
    width: (StringConstructor | NumberConstructor)[];
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    fit: {
        type: BooleanConstructor;
        default: boolean;
    };
    stripe: BooleanConstructor;
    border: BooleanConstructor;
    rowKey: import("vue").PropType<string | ((row: any) => string)>;
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSummary: BooleanConstructor;
    sumText: StringConstructor;
    summaryMethod: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").SummaryMethod<any>>;
    rowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
    rowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
    cellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
    cellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
    headerRowClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnCls<any>>;
    headerRowStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").ColumnStyle<any>>;
    headerCellClassName: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellCls<any>>;
    headerCellStyle: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").CellStyle<any>>;
    highlightCurrentRow: BooleanConstructor;
    currentRowKey: (StringConstructor | NumberConstructor)[];
    emptyText: StringConstructor;
    expandRowKeys: import("vue").PropType<any[]>;
    defaultExpandAll: BooleanConstructor;
    defaultSort: import("vue").PropType<import("element-plus/es/components/table/src/table/defaults").Sort>;
    tooltipEffect: StringConstructor;
    spanMethod: import("vue").PropType<(data: {
        row: any;
        rowIndex: number;
        column: import("element-plus/es/components/table/src/table-column/defaults").TableColumnCtx<any>;
        columnIndex: number;
    }) => number[] | {
        rowspan: number;
        colspan: number;
    }>;
    selectOnIndeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    indent: {
        type: NumberConstructor;
        default: number;
    };
    treeProps: {
        type: import("vue").PropType<{
            hasChildren?: string;
            children?: string;
        }>;
        default: () => {
            hasChildren: string;
            children: string;
        };
    };
    lazy: BooleanConstructor;
    load: import("vue").PropType<(row: any, treeNode: import("element-plus/es/components/table/src/table/defaults").TreeNode, resolve: (data: any[]) => void) => void>;
    style: {
        type: import("vue").PropType<CSSProperties>;
        default: () => {};
    };
    className: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: string;
    };
    scrollbarAlwaysOn: {
        type: BooleanConstructor;
        default: boolean;
    };
    flexible: BooleanConstructor;
    key: {
        type: StringConstructor | NumberConstructor;
        default: string;
    };
    columns: {
        type: ArrayConstructor;
        default: any[];
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingConfig: {
        type: ObjectConstructor;
        default: () => void;
    };
    alignWhole: {
        type: StringConstructor;
        default: string;
    };
    headerAlign: {
        type: StringConstructor;
        default: string;
    };
    showOverflowTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowHoverBgColor: {
        type: StringConstructor;
        default: string;
    };
    pagination: {
        type: ObjectConstructor;
        default: {
            total: number;
            pageSize: number;
            align: string;
            background: boolean;
            pageSizes: number[];
            layout: string;
        };
    };
    paginationSmall: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onSize-change"?: (...args: any[]) => any;
    "onCurrent-change"?: (...args: any[]) => any;
}, {
    data: any[];
    fit: boolean;
    stripe: boolean;
    border: boolean;
    showHeader: boolean;
    showSummary: boolean;
    highlightCurrentRow: boolean;
    defaultExpandAll: boolean;
    selectOnIndeterminate: boolean;
    indent: number;
    treeProps: {
        hasChildren: string;
        children: string;
    };
    lazy: boolean;
    style: CSSProperties;
    className: string;
    tableLayout: "fixed" | "auto";
    scrollbarAlwaysOn: boolean;
    flexible: boolean;
    key: string | number;
    columns: unknown[];
    loading: boolean;
    loadingConfig: Record<string, any>;
    alignWhole: string;
    headerAlign: string;
    showOverflowTooltip: boolean;
    rowHoverBgColor: string;
    pagination: Record<string, any>;
    paginationSmall: boolean;
}>;
export default _default;
