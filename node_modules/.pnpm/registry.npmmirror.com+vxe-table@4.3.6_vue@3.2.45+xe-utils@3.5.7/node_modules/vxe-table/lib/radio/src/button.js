"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _vue = require("vue");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _utils = require("../../tools/utils");
var _conf = _interopRequireDefault(require("../../v-x-e-table/src/conf"));
var _size = require("../../hooks/size");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = (0, _vue.defineComponent)({
  name: 'VxeRadioButton',
  props: {
    modelValue: [String, Number, Boolean],
    label: {
      type: [String, Number, Boolean],
      default: null
    },
    title: [String, Number],
    content: [String, Number],
    disabled: Boolean,
    strict: {
      type: Boolean,
      default: function () {
        return _conf.default.radioButton.strict;
      }
    },
    size: {
      type: String,
      default: function () {
        return _conf.default.radioButton.size || _conf.default.size;
      }
    }
  },
  emits: ['update:modelValue', 'change'],
  setup: function (props, context) {
    var slots = context.slots,
      emit = context.emit;
    var $xeform = (0, _vue.inject)('$xeform', null);
    var $xeformiteminfo = (0, _vue.inject)('$xeformiteminfo', null);
    var xID = _xeUtils.default.uniqueId();
    var computeSize = (0, _size.useSize)(props);
    var $xeradiobutton = {
      xID: xID,
      props: props,
      context: context
    };
    var radioButtonMethods = {};
    var $xeradiogroup = (0, _vue.inject)('$xeradiogroup', null);
    var computeDisabled = (0, _vue.computed)(function () {
      return props.disabled || $xeradiogroup && $xeradiogroup.props.disabled;
    });
    var computeName = (0, _vue.computed)(function () {
      return $xeradiogroup ? $xeradiogroup.name : null;
    });
    var computeStrict = (0, _vue.computed)(function () {
      return $xeradiogroup ? $xeradiogroup.props.strict : props.strict;
    });
    var computeChecked = (0, _vue.computed)(function () {
      var modelValue = props.modelValue,
        label = props.label;
      return $xeradiogroup ? $xeradiogroup.props.modelValue === label : modelValue === label;
    });
    radioButtonMethods = {
      dispatchEvent: function (type, params, evnt) {
        emit(type, Object.assign({
          $radioButton: $xeradiobutton,
          $event: evnt
        }, params));
      }
    };
    Object.assign($xeradiobutton, radioButtonMethods);
    var handleValue = function (label, evnt) {
      if ($xeradiogroup) {
        $xeradiogroup.handleChecked({
          label: label
        }, evnt);
      } else {
        emit('update:modelValue', label);
        radioButtonMethods.dispatchEvent('change', {
          label: label
        }, evnt);
        // 自动更新校验状态
        if ($xeform && $xeformiteminfo) {
          $xeform.triggerItemEvent(evnt, $xeformiteminfo.itemConfig.field, label);
        }
      }
    };
    var changeEvent = function (evnt) {
      var isDisabled = computeDisabled.value;
      if (!isDisabled) {
        handleValue(props.label, evnt);
      }
    };
    var clickEvent = function (evnt) {
      var isDisabled = computeDisabled.value;
      var isStrict = computeStrict.value;
      if (!isDisabled && !isStrict) {
        if (props.label === ($xeradiogroup ? $xeradiogroup.props.modelValue : props.modelValue)) {
          handleValue(null, evnt);
        }
      }
    };
    var renderVN = function () {
      var _a;
      var vSize = computeSize.value;
      var isDisabled = computeDisabled.value;
      var name = computeName.value;
      var checked = computeChecked.value;
      return (0, _vue.h)('label', {
        class: ['vxe-radio', 'vxe-radio-button', (_a = {}, _a["size--".concat(vSize)] = vSize, _a['is--disabled'] = isDisabled, _a)],
        title: props.title
      }, [(0, _vue.h)('input', {
        class: 'vxe-radio--input',
        type: 'radio',
        name: name,
        checked: checked,
        disabled: isDisabled,
        onChange: changeEvent,
        onClick: clickEvent
      }), (0, _vue.h)('span', {
        class: 'vxe-radio--label'
      }, slots.default ? slots.default({}) : (0, _utils.getFuncText)(props.content))]);
    };
    Object.assign($xeradiobutton, {
      renderVN: renderVN,
      dispatchEvent: dispatchEvent
    });
    return renderVN;
  }
});
exports.default = _default;