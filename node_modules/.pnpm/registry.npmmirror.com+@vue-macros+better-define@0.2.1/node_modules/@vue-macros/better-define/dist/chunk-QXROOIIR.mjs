// src/index.ts
import { existsSync } from "fs";
import { createUnplugin } from "unplugin";
import { createFilter } from "@rollup/pluginutils";
import { REGEX_SETUP_SFC, REGEX_VUE_SFC } from "@vue-macros/common";
import { setResolveTSFileIdImpl, tsFileCache } from "@vue-macros/api";

// src/core/index.ts
import { MagicString, getTransformResult, parseSFC } from "@vue-macros/common";
import { analyzeSFC } from "@vue-macros/api";
var transformBetterDefine = async (code, id, isProduction) => {
  const s = new MagicString(code);
  const sfc = parseSFC(code, id);
  if (sfc.script || !sfc.scriptSetup)
    return;
  const offset = sfc.scriptSetup.loc.start.offset;
  const result = await analyzeSFC(s, sfc);
  if (result.props) {
    await processProps(result.props);
  }
  if (result.emits) {
    processEmits(result.emits);
  }
  return getTransformResult(s, id);
  async function processProps(props) {
    const runtimeDefs = await props.getRuntimeDefinitions();
    const runtimeDecls = `{
  ${Object.entries(runtimeDefs).map(([key, { type, required, default: defaultDecl }]) => {
      let defaultString = "";
      if (defaultDecl) {
        defaultString = defaultDecl("default");
      }
      if (!isProduction) {
        return `${key}: { type: ${toRuntimeTypeString(
          type
        )}, required: ${required}, ${defaultString} }`;
      } else if (type.some((el) => el === "Boolean" || el === "Function")) {
        return `${key}: { type: ${toRuntimeTypeString(
          type
        )}, ${defaultString} }`;
      } else {
        return `${key}: ${defaultString ? `{ ${defaultString} }` : "null"}`;
      }
    }).join(",\n  ")}
}`;
    let decl = runtimeDecls;
    if (props.withDefaultsAst && !props.defaults) {
      decl = `_BD_mergeDefaults(${decl}, ${s.sliceNode(
        props.withDefaultsAst.arguments[1],
        { offset }
      )})`;
      s.prependLeft(
        offset,
        `import { mergeDefaults as _BD_mergeDefaults } from 'vue'`
      );
    }
    decl = `defineProps(${decl})`;
    s.overwriteNode(props.withDefaultsAst || props.definePropsAst, decl, {
      offset
    });
  }
  function processEmits(emits) {
    const runtimeDecls = `[${Object.keys(emits.definitions).map((name2) => JSON.stringify(name2)).join(", ")}]`;
    s.overwriteNode(emits.defineEmitsAst, `defineEmits(${runtimeDecls})`, {
      offset
    });
  }
};
function toRuntimeTypeString(types) {
  return types.length > 1 ? `[${types.join(", ")}]` : types[0];
}

// src/index.ts
function resolveOptions(options) {
  return {
    include: [REGEX_VUE_SFC, REGEX_SETUP_SFC],
    isProduction: process.env.NODE_ENV === "production",
    ...options
  };
}
var name = "unplugin-vue-better-define";
var src_default = createUnplugin((userOptions = {}, meta) => {
  const options = resolveOptions(userOptions);
  const filter = createFilter(options.include, options.exclude);
  const referencedFiles = /* @__PURE__ */ new Map();
  function collectReferencedFile(importer, file) {
    if (!importer)
      return;
    if (!referencedFiles.has(file)) {
      referencedFiles.set(file, /* @__PURE__ */ new Set([importer]));
    } else {
      referencedFiles.get(file).add(importer);
    }
  }
  return {
    name,
    enforce: "pre",
    buildStart() {
      if (meta.framework === "rollup" || meta.framework === "vite") {
        const ctx = this;
        const resolveFn = async (id, importer) => {
          var _a, _b;
          let resolved = (_a = await ctx.resolve(id, importer)) == null ? void 0 : _a.id;
          if (!resolved)
            return;
          if (existsSync(resolved)) {
            collectReferencedFile(importer, resolved);
            return resolved;
          }
          resolved = (_b = await ctx.resolve(resolved)) == null ? void 0 : _b.id;
          if (resolved && existsSync(resolved)) {
            collectReferencedFile(importer, resolved);
            return resolved;
          }
        };
        setResolveTSFileIdImpl(resolveFn);
      }
    },
    transformInclude(id) {
      return filter(id);
    },
    async transform(code, id) {
      try {
        return await transformBetterDefine(code, id, options.isProduction);
      } catch (err) {
        this.warn(`${name} ${err}`);
        console.warn(err);
      }
    },
    vite: {
      configResolved(config) {
        options.isProduction = config.isProduction;
      },
      handleHotUpdate({ file, server, modules }) {
        function getAffectedModules(file2) {
          if (!referencedFiles.has(file2))
            return /* @__PURE__ */ new Set([]);
          const modules2 = /* @__PURE__ */ new Set([]);
          for (const importer of referencedFiles.get(file2)) {
            const mods = server.moduleGraph.getModulesByFile(importer);
            if (mods)
              mods.forEach((m) => modules2.add(m));
            getAffectedModules(importer).forEach((m) => modules2.add(m));
          }
          return modules2;
        }
        if (tsFileCache[file])
          delete tsFileCache[file];
        const affected = getAffectedModules(file);
        return [...modules, ...affected];
      }
    }
  };
});

export {
  src_default
};
